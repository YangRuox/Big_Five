{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "17b83ec8-5252-458f-a72b-ef01711c15d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import TensorDataset, DataLoader\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "from sklearn.metrics import accuracy_score, f1_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "from torch.utils.data import TensorDataset, DataLoader\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from sklearn.metrics import accuracy_score, f1_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "from torch.utils.data import TensorDataset, DataLoader\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "046a2703-2f63-4cd8-8cd5-b7888a95f4d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "   # 读取Excel文件\n",
    "big5_df = pd.read_excel('Job-profile.xlsx', sheet_name='Big Five Domains')\n",
    "\n",
    "# 提取五大特质特征\n",
    "features = big5_df[['Neuroticism (M)', 'Extraversion (M)', \n",
    "                    'Openness (M)', 'Agreeableness (M)', \n",
    "                    'Conscientiousness (M)']]\n",
    "job_names = big5_df['Job'].tolist()\n",
    "\n",
    "# 标准化处理\n",
    "scaler = StandardScaler()\n",
    "scaled_features = scaler.fit_transform(features)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "31459a9c-1702-4634-9ff4-a66a0d2c67fa",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "65c8ebf1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Code</th>\n",
       "      <th>Job</th>\n",
       "      <th>N</th>\n",
       "      <th>Neuroticism (M)</th>\n",
       "      <th>Extraversion (M)</th>\n",
       "      <th>Openness (M)</th>\n",
       "      <th>Agreeableness (M)</th>\n",
       "      <th>Conscientiousness (M)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>Managers</td>\n",
       "      <td>1000</td>\n",
       "      <td>46.99</td>\n",
       "      <td>51.90</td>\n",
       "      <td>52.00</td>\n",
       "      <td>47.89</td>\n",
       "      <td>51.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>101x</td>\n",
       "      <td>Unspecified Heads of Department</td>\n",
       "      <td>1000</td>\n",
       "      <td>48.13</td>\n",
       "      <td>51.57</td>\n",
       "      <td>51.46</td>\n",
       "      <td>48.83</td>\n",
       "      <td>51.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1221</td>\n",
       "      <td>Sales and Marketing Managers</td>\n",
       "      <td>1000</td>\n",
       "      <td>47.78</td>\n",
       "      <td>54.29</td>\n",
       "      <td>50.04</td>\n",
       "      <td>47.31</td>\n",
       "      <td>51.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>200x</td>\n",
       "      <td>Unspecified Project Managers</td>\n",
       "      <td>1000</td>\n",
       "      <td>48.30</td>\n",
       "      <td>51.69</td>\n",
       "      <td>51.06</td>\n",
       "      <td>49.31</td>\n",
       "      <td>50.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2221</td>\n",
       "      <td>Nursing Professionals</td>\n",
       "      <td>1000</td>\n",
       "      <td>50.16</td>\n",
       "      <td>48.99</td>\n",
       "      <td>48.84</td>\n",
       "      <td>51.12</td>\n",
       "      <td>50.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>258</th>\n",
       "      <td>3154</td>\n",
       "      <td>Air Traffic Controllers</td>\n",
       "      <td>26</td>\n",
       "      <td>47.93</td>\n",
       "      <td>51.31</td>\n",
       "      <td>50.21</td>\n",
       "      <td>48.66</td>\n",
       "      <td>50.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>259</th>\n",
       "      <td>4227</td>\n",
       "      <td>Survey and Market Research Interviewers</td>\n",
       "      <td>26</td>\n",
       "      <td>50.05</td>\n",
       "      <td>50.96</td>\n",
       "      <td>50.41</td>\n",
       "      <td>48.60</td>\n",
       "      <td>47.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>260</th>\n",
       "      <td>5413</td>\n",
       "      <td>Prison Guards</td>\n",
       "      <td>26</td>\n",
       "      <td>49.44</td>\n",
       "      <td>49.37</td>\n",
       "      <td>48.93</td>\n",
       "      <td>49.02</td>\n",
       "      <td>49.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>261</th>\n",
       "      <td>9214</td>\n",
       "      <td>Garden and Horticultural Labourers</td>\n",
       "      <td>26</td>\n",
       "      <td>50.65</td>\n",
       "      <td>46.71</td>\n",
       "      <td>48.05</td>\n",
       "      <td>51.05</td>\n",
       "      <td>48.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>262</th>\n",
       "      <td>3251</td>\n",
       "      <td>Dental Assistants and Therapists</td>\n",
       "      <td>25</td>\n",
       "      <td>48.82</td>\n",
       "      <td>52.36</td>\n",
       "      <td>49.94</td>\n",
       "      <td>51.44</td>\n",
       "      <td>53.68</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>263 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Code                                      Job     N  Neuroticism (M)  \\\n",
       "0    1000                                 Managers  1000            46.99   \n",
       "1    101x          Unspecified Heads of Department  1000            48.13   \n",
       "2    1221             Sales and Marketing Managers  1000            47.78   \n",
       "3    200x             Unspecified Project Managers  1000            48.30   \n",
       "4    2221                    Nursing Professionals  1000            50.16   \n",
       "..    ...                                      ...   ...              ...   \n",
       "258  3154                  Air Traffic Controllers    26            47.93   \n",
       "259  4227  Survey and Market Research Interviewers    26            50.05   \n",
       "260  5413                            Prison Guards    26            49.44   \n",
       "261  9214       Garden and Horticultural Labourers    26            50.65   \n",
       "262  3251         Dental Assistants and Therapists    25            48.82   \n",
       "\n",
       "     Extraversion (M)  Openness (M)  Agreeableness (M)  Conscientiousness (M)  \n",
       "0               51.90         52.00              47.89                  51.53  \n",
       "1               51.57         51.46              48.83                  51.23  \n",
       "2               54.29         50.04              47.31                  51.30  \n",
       "3               51.69         51.06              49.31                  50.56  \n",
       "4               48.99         48.84              51.12                  50.93  \n",
       "..                ...           ...                ...                    ...  \n",
       "258             51.31         50.21              48.66                  50.82  \n",
       "259             50.96         50.41              48.60                  47.42  \n",
       "260             49.37         48.93              49.02                  49.31  \n",
       "261             46.71         48.05              51.05                  48.27  \n",
       "262             52.36         49.94              51.44                  53.68  \n",
       "\n",
       "[263 rows x 8 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "big5_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a61c3732-2f37-4c09-a81e-2ebb1ce535cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "def augment_data(features, noise_ratio, n_samples_per_job):\n",
    "    noise_scale = np.std(features, axis=0) * noise_ratio\n",
    "\n",
    "    X_augmented = []\n",
    "    y_augmented = []\n",
    "\n",
    "    for job_idx, original_feature in enumerate(features):\n",
    "        samples = original_feature + np.random.normal(scale=noise_scale, size=(n_samples_per_job, features.shape[1]))\n",
    "        X_augmented.append(samples)\n",
    "        y_augmented.extend([job_idx] * n_samples_per_job)\n",
    "\n",
    "    X = np.vstack(X_augmented)\n",
    "    y = np.array(y_augmented)\n",
    "    return X, y\n",
    "\n",
    "class JobRecommenderMLP(nn.Module):\n",
    "    def __init__(self, input_dim, hidden_dim, output_dim):\n",
    "        super(JobRecommenderMLP, self).__init__()\n",
    "        self.model = nn.Sequential(\n",
    "            nn.Linear(input_dim, hidden_dim),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(hidden_dim, output_dim)\n",
    "        )\n",
    "    \n",
    "    def forward(self, x):\n",
    "        return self.model(x)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d743e2f5-4544-4ef3-a11e-599cd6c6dcf1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100 | Train Loss: 0.3546, Val Loss: 0.0455 | Train Acc: 0.9485, Val Acc: 0.9873 | Train F1: 0.9494, Val F1: 0.9869\n",
      "Epoch 2/100 | Train Loss: 0.0363, Val Loss: 0.0358 | Train Acc: 0.9893, Val Acc: 0.9879 | Train F1: 0.9893, Val F1: 0.9879\n",
      "Epoch 3/100 | Train Loss: 0.0293, Val Loss: 0.0311 | Train Acc: 0.9903, Val Acc: 0.9897 | Train F1: 0.9903, Val F1: 0.9897\n",
      "Epoch 4/100 | Train Loss: 0.0271, Val Loss: 0.0262 | Train Acc: 0.9907, Val Acc: 0.9907 | Train F1: 0.9906, Val F1: 0.9907\n",
      "Epoch 5/100 | Train Loss: 0.0257, Val Loss: 0.0252 | Train Acc: 0.9910, Val Acc: 0.9912 | Train F1: 0.9910, Val F1: 0.9912\n",
      "Epoch 6/100 | Train Loss: 0.0252, Val Loss: 0.0276 | Train Acc: 0.9910, Val Acc: 0.9905 | Train F1: 0.9910, Val F1: 0.9905\n",
      "Epoch 7/100 | Train Loss: 0.0246, Val Loss: 0.0263 | Train Acc: 0.9911, Val Acc: 0.9906 | Train F1: 0.9911, Val F1: 0.9907\n",
      "Epoch 8/100 | Train Loss: 0.0241, Val Loss: 0.0243 | Train Acc: 0.9913, Val Acc: 0.9913 | Train F1: 0.9912, Val F1: 0.9913\n",
      "Epoch 9/100 | Train Loss: 0.0240, Val Loss: 0.0212 | Train Acc: 0.9914, Val Acc: 0.9925 | Train F1: 0.9914, Val F1: 0.9925\n",
      "Epoch 10/100 | Train Loss: 0.0239, Val Loss: 0.0261 | Train Acc: 0.9914, Val Acc: 0.9907 | Train F1: 0.9914, Val F1: 0.9907\n",
      "Epoch 11/100 | Train Loss: 0.0235, Val Loss: 0.0227 | Train Acc: 0.9912, Val Acc: 0.9919 | Train F1: 0.9912, Val F1: 0.9919\n",
      "Epoch 12/100 | Train Loss: 0.0228, Val Loss: 0.0250 | Train Acc: 0.9918, Val Acc: 0.9908 | Train F1: 0.9918, Val F1: 0.9908\n",
      "Early stopping triggered.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<All keys matched successfully>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 数据增强\n",
    "X_aug, y_aug = augment_data(scaled_features, noise_ratio=0.1, n_samples_per_job=1000)\n",
    "\n",
    "\n",
    "\n",
    "# 数据划分\n",
    "X_train, X_val, y_train, y_val = train_test_split(X_aug, y_aug, test_size=0.25, random_state=42)\n",
    "\n",
    "train_dataset = TensorDataset(torch.tensor(X_train, dtype=torch.float32), torch.tensor(y_train, dtype=torch.long))\n",
    "val_dataset = TensorDataset(torch.tensor(X_val, dtype=torch.float32), torch.tensor(y_val, dtype=torch.long))\n",
    "\n",
    "train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n",
    "val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)\n",
    "\n",
    "# 模型定义（你已有）\n",
    "input_dim = X_aug.shape[1]\n",
    "hidden_dim = 128\n",
    "output_dim = len(job_names)\n",
    "model = JobRecommenderMLP(input_dim, hidden_dim, output_dim)\n",
    "\n",
    "# 损失函数 & 优化器\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "optimizer = optim.Adam(model.parameters(), lr=0.001)\n",
    "\n",
    "# 训练参数\n",
    "n_epochs = 100\n",
    "patience = 3\n",
    "best_val_loss = float('inf')\n",
    "wait = 0\n",
    "\n",
    "train_loss_list, val_loss_list = [], []\n",
    "train_acc_list, val_acc_list = [], []\n",
    "train_f1_list, val_f1_list = [], []\n",
    "\n",
    "for epoch in range(n_epochs):\n",
    "    model.train()\n",
    "    train_preds, train_targets = [], []\n",
    "    total_train_loss = 0\n",
    "\n",
    "    for batch_X, batch_y in train_loader:\n",
    "        optimizer.zero_grad()\n",
    "        output = model(batch_X)\n",
    "        loss = criterion(output, batch_y)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        total_train_loss += loss.item()\n",
    "\n",
    "        pred_labels = torch.argmax(output, dim=1).detach().cpu().numpy()\n",
    "        train_preds.extend(pred_labels)\n",
    "        train_targets.extend(batch_y.detach().cpu().numpy())\n",
    "\n",
    "    avg_train_loss = total_train_loss / len(train_loader)\n",
    "    train_acc = accuracy_score(train_targets, train_preds)\n",
    "    train_f1 = f1_score(train_targets, train_preds, average='macro')\n",
    "\n",
    "    # 验证阶段\n",
    "    model.eval()\n",
    "    val_preds, val_targets = [], []\n",
    "    total_val_loss = 0\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for batch_X, batch_y in val_loader:\n",
    "            output = model(batch_X)\n",
    "            loss = criterion(output, batch_y)\n",
    "            total_val_loss += loss.item()\n",
    "\n",
    "            pred_labels = torch.argmax(output, dim=1).detach().cpu().numpy()\n",
    "            val_preds.extend(pred_labels)\n",
    "            val_targets.extend(batch_y.detach().cpu().numpy())\n",
    "\n",
    "    avg_val_loss = total_val_loss / len(val_loader)\n",
    "    val_acc = accuracy_score(val_targets, val_preds)\n",
    "    val_f1 = f1_score(val_targets, val_preds, average='macro')\n",
    "\n",
    "    # 保存记录\n",
    "    train_loss_list.append(avg_train_loss)\n",
    "    val_loss_list.append(avg_val_loss)\n",
    "    train_acc_list.append(train_acc)\n",
    "    val_acc_list.append(val_acc)\n",
    "    train_f1_list.append(train_f1)\n",
    "    val_f1_list.append(val_f1)\n",
    "\n",
    "    print(f\"Epoch {epoch+1}/{n_epochs} | \"\n",
    "          f\"Train Loss: {avg_train_loss:.4f}, Val Loss: {avg_val_loss:.4f} | \"\n",
    "          f\"Train Acc: {train_acc:.4f}, Val Acc: {val_acc:.4f} | \"\n",
    "          f\"Train F1: {train_f1:.4f}, Val F1: {val_f1:.4f}\")\n",
    "\n",
    "    # Early stopping\n",
    "    if avg_val_loss < best_val_loss:\n",
    "        best_val_loss = avg_val_loss\n",
    "        best_model_state = model.state_dict()\n",
    "        wait = 0\n",
    "    else:\n",
    "        wait += 1\n",
    "        if wait >= patience:\n",
    "            print(\"Early stopping triggered.\")\n",
    "            break\n",
    "\n",
    "# 加载最佳模型\n",
    "model.load_state_dict(best_model_state)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "df81002e-333f-449c-9dbb-0059a6c3e919",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x400 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Loss\n",
    "plt.figure(figsize=(12,4))\n",
    "plt.subplot(1,3,1)\n",
    "plt.plot(train_loss_list, label='Train Loss')\n",
    "plt.plot(val_loss_list, label='Val Loss')\n",
    "plt.title(\"Loss Curve\")\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"Loss\")\n",
    "plt.legend()\n",
    "\n",
    "# Accuracy\n",
    "plt.subplot(1,3,2)\n",
    "plt.plot(train_acc_list, label='Train Acc')\n",
    "plt.plot(val_acc_list, label='Val Acc')\n",
    "plt.title(\"Accuracy Curve\")\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.legend()\n",
    "\n",
    "# F1\n",
    "plt.subplot(1,3,3)\n",
    "plt.plot(train_f1_list, label='Train F1')\n",
    "plt.plot(val_f1_list, label='Val F1')\n",
    "plt.title(\"F1 Score Curve\")\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"F1 Score\")\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a2186faa-ecf0-41ca-a27f-abd3a52e0aa1",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "similarity_matrix = cosine_similarity(scaled_features)\n",
    "# similarity_matrix.shape = (263, 263)\n",
    "\n",
    "\n",
    "def recommend_jobs(user_big5_scores, model, similarity_matrix, top_k=10):\n",
    "    model.eval()\n",
    "    with torch.no_grad():\n",
    "        # 标准化用户输入\n",
    "        user_scaled = scaler.transform([user_big5_scores])\n",
    "        user_tensor = torch.tensor(user_scaled, dtype=torch.float32)\n",
    "\n",
    "        # MLP 输出 logits\n",
    "        logits = model(user_tensor).numpy().flatten()\n",
    "\n",
    "        # 计算 similarity-aware score（逻辑输出 × 相似度）\n",
    "        match_score = similarity_matrix @ logits\n",
    "\n",
    "        # 取 Top-k\n",
    "        top_indices = np.argsort(match_score)[-top_k:][::-1]\n",
    "        top_jobs = [(job_codes[i], job_names[i], match_score[i]) for i in top_indices]  # 加上代码\n",
    "\n",
    "        return top_jobs\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "9ffa2834",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1. 2342 - Early Childhood Educators (score: 5304.24)\n",
      "2. 2341 - Primary School Teachers (score: 4822.21)\n",
      "3. 3431 - Photographers (score: 4734.45)\n",
      "4. 2352 - Special Needs Teachers (score: 4727.65)\n",
      "5. 5312 - Teachers’ Aides (score: 4700.38)\n",
      "6. 5244 - Contact Centre Salespersons (score: 4663.08)\n",
      "7. 5321 - Health Care Assistants (score: 4501.12)\n",
      "8. 5311 - Child Care Workers (score: 4431.53)\n",
      "9. 2266 - Audiologists and Speech Therapists (score: 4265.23)\n",
      "10. 2635 - Social Work and Counselling Professionals (score: 4070.27)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\L\\AppData\\Roaming\\Python\\Python312\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "# 示例人格分数（原始 Big Five T 分数）\n",
    "user_input = [51.46,\t51.17,\t46.09,\t52.15,\t49.41]\n",
    "\n",
    "recommendations = recommend_jobs(user_input, model, similarity_matrix, top_k=10)\n",
    "\n",
    "for i, (code, job, score) in enumerate(recommendations):\n",
    "    print(f\"{i+1}. {code} - {job} (score: {score:.2f})\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b7e4ecb",
   "metadata": {},
   "source": [
    "def recommend_jobs(user_big5_scores, model, top_k=10):\n",
    "    model.eval()\n",
    "    with torch.no_grad():\n",
    "        # 标准化用户输入\n",
    "        user_scaled = scaler.transform([user_big5_scores])\n",
    "        user_tensor = torch.tensor(user_scaled, dtype=torch.float32)\n",
    "\n",
    "        # 获取模型输出（logits），直接作为分数\n",
    "        logits = model(user_tensor).numpy().flatten()\n",
    "\n",
    "        # 取 Top-k（根据模型输出的分数）\n",
    "        top_indices = np.argsort(logits)[-top_k:][::-1]\n",
    "        top_jobs = [(job_codes[i], job_names[i], logits[i]) for i in top_indices]\n",
    "\n",
    "        return top_jobs\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ac7c14e",
   "metadata": {},
   "source": [
    "# 示例人格分数（原始 Big Five T 分数）\n",
    "user_input = [51.46,\t51.17,\t46.09,\t52.15,\t49.41]\n",
    "\n",
    "recommendations = recommend_jobs(user_input, model, top_k=10)\n",
    "\n",
    "for i, (code, job, score) in enumerate(recommendations):\n",
    "    print(f\"{i+1}. {code} - {job} (score: {score:.2f})\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "84d618d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "\n",
    "# 假设你的模型是 model\n",
    "torch.save(model.state_dict(), \"your_model.pth\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "2cd95961",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['your_scaler.pkl']"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import joblib\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# 假设你已经对特征使用了 scaler\n",
    "scaler = StandardScaler()\n",
    "scaler.fit(X_train)  # 这里 X_train 是你训练数据的特征\n",
    "joblib.dump(scaler, \"your_scaler.pkl\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "81089124",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "# 假设 job_names 和 job_codes 是你拥有的职业名称和代码列表\n",
    "job_names = big5_df['Job'].tolist() # 你的职业名称列表\n",
    "job_codes = big5_df['Code'].tolist() # 你的职业代码列表\n",
    "\n",
    "# 保存为 numpy 文件\n",
    "np.save(\"job_names.npy\", job_names)\n",
    "np.save(\"job_codes.npy\", job_codes)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "267e28fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 假设 scaled_features 是你的职业特征经过标准化后的数据\n",
    " # 假设 job_features 是你未标准化的职业特征\n",
    "\n",
    "# 保存标准化后的职业特征\n",
    "np.save(\"scaled_features.npy\", scaled_features)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "642b3677",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "\n",
    "\n",
    "# 保存相似度矩阵\n",
    "np.save(\"similarity_matrix.npy\", similarity_matrix)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "f7b0882f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-04-19 08:13:13.336 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.484 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\L\\AppData\\Roaming\\Python\\Python312\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-04-19 08:13:13.485 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.485 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.486 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.487 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.487 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.488 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.490 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.491 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.491 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.492 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.492 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.493 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.494 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.494 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.495 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.495 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.496 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.497 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.498 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.498 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.498 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.499 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.499 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.500 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.500 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.500 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.502 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.503 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.503 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.504 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.504 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.505 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.505 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.506 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.506 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.506 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.507 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.508 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.508 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.508 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.510 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.511 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.511 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.512 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.512 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.513 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.514 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.514 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.514 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.515 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.515 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.517 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.518 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.519 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.519 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.520 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.521 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.522 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.523 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.524 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.524 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.526 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.526 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.527 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.529 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.530 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.531 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.531 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.533 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.533 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.534 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.534 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.535 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.535 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.536 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.536 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.537 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.538 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.538 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.540 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.540 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.540 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.541 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.542 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.578 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.579 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.580 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.580 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.581 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.581 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.582 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.583 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.584 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.585 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.586 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.593 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.594 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.596 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.596 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.597 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.598 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.598 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.598 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.599 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.599 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.599 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.599 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.601 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.601 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.602 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.602 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.603 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.603 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.606 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.613 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.613 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.614 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.614 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.615 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.616 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.617 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.617 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.619 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.619 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.619 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.620 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.621 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.621 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.622 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.622 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.622 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.623 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.624 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.624 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.624 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.625 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.626 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.627 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.627 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.628 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.628 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.630 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.630 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.630 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.631 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.631 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.632 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.632 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.633 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.633 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.634 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.634 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.635 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.635 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.635 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.636 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.636 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.636 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.638 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.638 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.638 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.639 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.639 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.639 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.640 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.640 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.641 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.641 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.642 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.643 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.644 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.646 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.646 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.647 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.647 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.647 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.648 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.648 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.649 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.649 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.649 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.651 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.652 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.652 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.653 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.653 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.654 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.654 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.655 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.655 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.655 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.656 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.656 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.657 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.658 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.660 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.661 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.662 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.663 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.664 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.664 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.665 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.666 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.666 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.667 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.667 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.668 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.668 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.669 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.669 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.670 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.670 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.671 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.671 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.672 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.672 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.673 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.673 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.674 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.675 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.675 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.677 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-19 08:13:13.677 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import numpy as np\n",
    "from joblib import load\n",
    "\n",
    "# 定义你的模型架构\n",
    "class JobRecommenderMLP(nn.Module):\n",
    "    def __init__(self, input_dim, hidden_dim, output_dim):\n",
    "        super(JobRecommenderMLP, self).__init__()\n",
    "        self.model = nn.Sequential(\n",
    "            nn.Linear(input_dim, hidden_dim),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(hidden_dim, output_dim)\n",
    "        )\n",
    "    \n",
    "    def forward(self, x):\n",
    "        return self.model(x)\n",
    "\n",
    "# 加载训练好的模型和数据\n",
    "model = JobRecommenderMLP(input_dim=5, hidden_dim=128, output_dim=263)  # 调整为你的模型结构\n",
    "model.load_state_dict(torch.load(\"your_model.pth\", map_location=torch.device(\"cpu\")))\n",
    "model.eval()  # 切换到评估模式\n",
    "\n",
    "# 加载其他资源\n",
    "scaler = load(\"your_scaler.pkl\")  # 你训练模型时使用的 scaler\n",
    "job_names = np.load(\"job_names.npy\")  # 263个职业名称\n",
    "job_codes = np.load(\"job_codes.npy\")  # 对应职业代码\n",
    "scaled_features = np.load(\"scaled_features.npy\")  # 原始职业特征（用于相似度）\n",
    "similarity_matrix = np.load(\"similarity_matrix.npy\")\n",
    "\n",
    "# 44道题 + 每题所属维度 + 正反向\n",
    "items = [\n",
    "    # (题目, 维度名, 是否反向)\n",
    "    (\"I am the life of the party.\", \"Extraversion\", False),\n",
    "    (\"I don't talk a lot.\", \"Extraversion\", True),\n",
    "    (\"I feel comfortable around people.\", \"Extraversion\", False),\n",
    "    (\"I keep in the background.\", \"Extraversion\", True),\n",
    "    (\"I start conversations.\", \"Extraversion\", False),\n",
    "    (\"I have little to say.\", \"Extraversion\", True),\n",
    "    (\"I talk to a lot of different people at parties.\", \"Extraversion\", False),\n",
    "    (\"I don't like to draw attention to myself.\", \"Extraversion\", True),\n",
    "    (\"I am quiet around strangers.\", \"Extraversion\", True),\n",
    "    \n",
    "    (\"I enjoy trying new things.\", \"Openness\", False),\n",
    "    (\"I have a rich vocabulary.\", \"Openness\", False),\n",
    "    (\"I have a vivid imagination.\", \"Openness\", False),\n",
    "    (\"I am quick to understand things.\", \"Openness\", False),\n",
    "    (\"I spend time reflecting on things.\", \"Openness\", False),\n",
    "    (\"I am not interested in abstract ideas.\", \"Openness\", True),\n",
    "    (\"I do not like art.\", \"Openness\", True),\n",
    "    (\"I have difficulty understanding abstract ideas.\", \"Openness\", True),\n",
    "    (\"I have a lot of artistic interests.\", \"Openness\", False),\n",
    "    \n",
    "    (\"I am easily disturbed.\", \"Neuroticism\", False),\n",
    "    (\"I get upset easily.\", \"Neuroticism\", False),\n",
    "    (\"I change my mood a lot.\", \"Neuroticism\", False),\n",
    "    (\"I get nervous easily.\", \"Neuroticism\", False),\n",
    "    (\"I worry about things.\", \"Neuroticism\", False),\n",
    "    (\"I often feel blue.\", \"Neuroticism\", False),\n",
    "    (\"I am relaxed most of the time.\", \"Neuroticism\", True),\n",
    "    (\"I rarely feel depressed.\", \"Neuroticism\", True),\n",
    "    (\"I am easily embarrassed.\", \"Neuroticism\", False),\n",
    "    \n",
    "    (\"I feel little concern for others.\", \"Agreeableness\", True),\n",
    "    (\"I am not interested in other people's problems.\", \"Agreeableness\", True),\n",
    "    (\"I insult people.\", \"Agreeableness\", True),\n",
    "    (\"I sympathize with others' feelings.\", \"Agreeableness\", False),\n",
    "    (\"I take time out for others.\", \"Agreeableness\", False),\n",
    "    (\"I am not really interested in others.\", \"Agreeableness\", True),\n",
    "    (\"I feel others' emotions.\", \"Agreeableness\", False),\n",
    "    (\"I make people feel at ease.\", \"Agreeableness\", False),\n",
    "    \n",
    "    (\"I am often preoccupied with details.\", \"Conscientiousness\", False),\n",
    "    (\"I follow a schedule.\", \"Conscientiousness\", False),\n",
    "    (\"I am exacting in my work.\", \"Conscientiousness\", False),\n",
    "    (\"I am always prepared.\", \"Conscientiousness\", False),\n",
    "    (\"I leave my belongings around.\", \"Conscientiousness\", True),\n",
    "    (\"I pay attention to details.\", \"Conscientiousness\", False),\n",
    "    (\"I make plans and stick to them.\", \"Conscientiousness\", False),\n",
    "    (\"I get chores done right away.\", \"Conscientiousness\", False),\n",
    "]\n",
    "\n",
    "# 显示表单\n",
    "st.title(\"🔍 Big Five Personality Test + Career Recommender\")\n",
    "\n",
    "st.markdown(\"请根据自己的真实感受选择下列描述的适用程度：**1（非常不同意）到 5（非常同意）**\")\n",
    "\n",
    "response_dict = {}\n",
    "for i, (q, _, _) in enumerate(items):\n",
    "    response = st.slider(f\"{i+1}. {q}\", 1, 5, 3)\n",
    "    response_dict[i] = response\n",
    "\n",
    "if st.button(\"🎯 提交并推荐职业\"):\n",
    "    # 分类问题 -> 计算每个维度得分\n",
    "    trait_scores = {\"Extraversion\": [], \"Openness\": [], \"Neuroticism\": [], \"Agreeableness\": [], \"Conscientiousness\": []}\n",
    "    for i, (q, trait, reverse) in enumerate(items):\n",
    "        score = 6 - response_dict[i] if reverse else response_dict[i]\n",
    "        trait_scores[trait].append(score)\n",
    "    \n",
    "    big5_vector = [np.mean(trait_scores[trait]) for trait in [\"Neuroticism\", \"Extraversion\", \"Openness\", \"Agreeableness\", \"Conscientiousness\"]]\n",
    "\n",
    "    # 标准化 + 模型预测\n",
    "    scaled_input = scaler.transform([big5_vector])\n",
    "    with torch.no_grad():\n",
    "        input_tensor = torch.tensor(scaled_input, dtype=torch.float32)\n",
    "        logits = model(input_tensor).numpy().flatten()\n",
    "        scores = similarity_matrix @ logits\n",
    "\n",
    "        top_indices = np.argsort(scores)[-10:][::-1]\n",
    "        st.subheader(\"🧠 推荐职业 Top-10\")\n",
    "        for i in top_indices:\n",
    "            st.write(f\"{job_codes[i]} - {job_names[i]}  （相似度得分：{scores[i]:.3f}）\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c55c99be",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "95c29750-af33-432e-bd4d-32a2ba61b8fb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
